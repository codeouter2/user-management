package com.auth.user.management.service.impl;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

import javax.imageio.ImageIO;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.auth.user.management.config.CaptchaConfig;
import com.auth.user.management.service.UserService;
import java.awt.image.BufferedImage;
import java.awt.*;


@Service
public class UserServiceImpl implements UserService{
	
	final static Logger logger = LogManager.getLogger(UserServiceImpl.class);
	
	@Autowired
	private CaptchaConfig userConfig;

	@Override
	public String captcha() throws IOException {
		logger.debug("Entryt into - captcha processing");
		String captcha = processCaptcha();
		getCaptchaImage(captcha);
		return captcha;
	}

	private void getCaptchaImage(String captchaVal) throws IOException {
		try(OutputStream os = new FileOutputStream("captcha.jpg",false)){
			int width=130;
			int height=35;
			BufferedImage bufferImg = new BufferedImage(width,height,BufferedImage.OPAQUE);
			Graphics graphics = bufferImg.createGraphics();
			graphics.setFont(new Font("Arial",Font.BOLD,20));
			graphics.setColor(new Color(255,255,255));
			graphics.fillRect(0,0,width,height);
			graphics.drawString(captchaVal,20,25);
			ImageIO.write(bufferImg, "jpg",os);
		}
	}

	private String processCaptcha() {
		String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String lower = "abcdefghijklmnopqrstuvwxyz";
		String number= "0123456789";
		String special="!@#$%&";
		String str = "";
		if(userConfig.getCaptchaOnlyWithUpperLetter()) {
			str=getCaptchaReady(upper);
		}else if(userConfig.getCaptchaOnlyWithLowerLetter()) {
			str=getCaptchaReady(lower);
		}
		else if(userConfig.getCaptchaOnlyWithBothLetter()) {
			str=getCaptchaReady(upper+lower);
		}
		else if(userConfig.getCaptchaWithLowerAndNumber()) {
			str=getCaptchaReady(lower+number);
		}
		else if(userConfig.getCaptchaWithUpperAndNumber()) {
			str=getCaptchaReady(upper+number);
		}
		else if(userConfig.getCaptchaWithAlphanumericAndSpecial()) {
			str=getCaptchaReady(upper+lower+special+number);
		}
		else {
			str=getCaptchaReady(upper+lower+number);
		}
		return str;
	}

	private String getCaptchaReady(String captchaChar) {
		int length = userConfig.getCaptchaLength();
		StringBuilder captchaBuild = new StringBuilder();
		List<Character> newCaptcha = new ArrayList<>();
		String finalCaptcha = "";
		for(int i=0;i<length;i++) {
			int randomIndex = (int) (Math.random()*captchaChar.length());
			char charAdd = captchaChar.charAt(randomIndex);
			captchaBuild.append(charAdd);
		}
		newCaptcha = captchaBuild.chars().mapToObj(e -> (char)e).collect(Collectors.toList());
		Collections.shuffle(newCaptcha,new Random());
		finalCaptcha = newCaptcha.stream().map(String :: valueOf).collect(Collectors.joining());
		return finalCaptcha;
	}
	
}
